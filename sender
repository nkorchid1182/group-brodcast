package com.example.broaad;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.DatagramPacket;
import java.net.InetAddress;
import java.net.MulticastSocket;

import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.BitmapFactory;
import android.os.IBinder;
import android.telephony.PhoneStateListener;
import android.telephony.TelephonyManager;
import android.widget.TextView;
import android.widget.Toast;

public class sender extends Service
{
	 SenderThread st;
	SenderThread currentSender;
	 TextView textOut;
	    TelephonyManager telephonyManager;
	    PhoneStateListener listener;
	    Context cc;
static boolean ring=false;
	public class SenderThread extends Thread
	{
		
		public void run()
		{
			currentSender = this;
			try
			{
			
				
				MulticastSocket ms = new MulticastSocket(2000);
				MainActivity main = null;
				// EditText str=main.ipaddress;

				// String groupaddress =str.getText().toString();//
				String groupaddress = "224.0.0.1";

				ms.joinGroup(InetAddress.getByName(groupaddress));
				Bitmap bmp = null;
				byte[] b = new byte[102400];
				int width = 320;
				int height = 480;
				ByteArrayOutputStream baos = new ByteArrayOutputStream(width
						* height * 2 * 3);
				// File f=new File("/mnt/sdcard/img.png");
				while (Thread.currentThread() == currentSender && !ring)
				{
					try
					{
						// f.delete();
						// long start = System.currentTimeMillis();
						// if (bmp == null) {
						// bmp = Bitmap.createBitmap(width, height,
						// Config.ARGB_8888);
						// }

						// Process proc = Runtime.getRuntime().exec(
						// "su -c cat /dev/graphics/fb0");

						Process proc1 = Runtime.getRuntime().exec("su ", null,
								null);
						
						OutputStream os = proc1.getOutputStream();
						os.write(("/system/bin/screencap -p "
								+ "/mnt/sdcard/img.png").getBytes("ASCII"));
						os.flush();

						os.close();
						proc1.waitFor();

						InputStream fis = new FileInputStream(
								"/mnt/sdcard/img.png"); // proc.getInputStream();
						bmp = BitmapFactory.decodeStream(fis);
						//if(fis!=null)
							
						System.out.println("DECODED BITMAP:" + bmp);
						int n;
						fis.close();
						// baos.reset();
						// while ((n = fis.read(b)) != -1) {
						// baos.write(b, 0, n);
						// }
						// fis.close();
						// byte[] b2 = baos.toByteArray();
						// System.out.println("BYTES READ:" + b.length);

						// byte data[] = b2;

						int f1;
						int row = 0;
						int col = 0;
						// f1 = fis1.read(data);
						int pos = width * height * 4;

						/*
						 * for (int y = 0; y < height; y++) { for (int x = 0; x
						 * < width; x++) { int b1 = data[pos] | (data[pos + 1]
						 * << 8); int c = 0; int red = (255 * (b1 & 0x001F)) /
						 * 32; int green = (255 * ((b1 & 0x07E0) >> 5)) / 64;
						 * int blue = (255 * ((b1 & 0xF800) >> 11)) / 32; //
						 * c=(red<<16)|(red<<8)|red; c = (0xff << 24) | (red <<
						 * 16) | (red << 8) | red; // c=(int) (b1 & 0xff) << 24
						 * // | (int) (b1 & 0xff) << 16 // | (int) (b1 & 0xff)
						 * << 8 // | (int) (b1 & 0xff) | red; { //
						 * System.out.printf
						 * ("%x %02d %02d %02d %03d %03d\n",b&0xffff
						 * ,red,green,blue,x,y); // System.out.printf("%x\n",c);
						 * } bmp.setPixel(x, y, c);
						 * 
						 * pos += 2; }
						 * 
						 * // bmp.setPixel(100, y, color)
						 * 
						 * }
						 */
						for (int y = 0; y < height; y += 100)
						{
							for (int x = 0; x < width; x += 100)
							{
								int w = Math.min(100, width - x);
								int h = Math.min(100, height - y);
								Bitmap bmppart = Bitmap.createBitmap(bmp, x, y,
										w, h);
								baos.reset();
								DataOutputStream dos = new DataOutputStream(
										baos);
								dos.writeInt(x);
								dos.writeInt(y);
								dos.writeInt(w);
								dos.writeInt(h);
								dos.flush();

								bmppart.compress(CompressFormat.PNG, 80, baos);
								byte[] b3 = baos.toByteArray();
								DatagramPacket dp = new DatagramPacket(b3,
										b3.length);
								dp.setAddress(InetAddress
										.getByName(groupaddress));
								dp.setPort(2000);
								ms.send(dp);
							//	System.out.println("PACKET SENT");
								// System.err.print(b3);
							}
						}
					} catch (IOException e)
					{
						// TODO Auto-generated catch block
						System.err.println("" + e.getMessage());
					}

				}
			} catch (Exception e)
			{
				// Toast.makeText(getApplicationContext(), ""+e,
				// Toast.LENGTH_SHORT);
				System.err.println("" + e.getMessage());
				e.printStackTrace();
			}

		}
			}

	@Override
	public IBinder onBind(Intent arg0)
	{
		// TODO Auto-generated method stub
		return null;
	}
@Override
public void onCreate()
{
	super.onCreate();
	
	st=new SenderThread();
//	st.start();
	  telephonyManager = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
	// TODO Auto-generated method stub
	listener = new PhoneStateListener() {
        @Override
        public void onCallStateChanged(int state, String incomingNumber) {
            String stateString = "N/A";
            switch (state) {
            case TelephonyManager.CALL_STATE_IDLE:
         //       stateString = "Idle";
            	System.out.println("idle");
            		//st.stop();
            	//ring=false;
            	if(ring==true){
              	ring=false;  	
              	st=new SenderThread();
              	st.start();
              	}
            	//st.notify();
            	//Toast.makeText(getApplicationContext(), "idle moble", Toast.LENGTH_SHORT).show();
                break;
            case TelephonyManager.CALL_STATE_OFFHOOK:
            	//stateString = "Off Hook";
            	System.out.println("call on hold");
            	//	st.stop();
          
            	//stopService(name)	
            //	Toast.makeText(getApplicationContext(), "call on hold", Toast.LENGTH_SHORT).show();
                break;
                
            case TelephonyManager.CALL_STATE_RINGING:
                //stateString = "Ringing";
            	System.out.println("ringing ");
            	try
				{
            		ring=true;
            		//st.suspend();
					//st.destroy();
				} catch (Exception e)
				{
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            	//Toast.makeText(getApplicationContext(), "ringing", Toast.LENGTH_SHORT).show();
                break;
            }
           // textOut.append(String.format("\nonCallStateChanged: %s",
             //       stateString));
        }
    };

    // Register the listener with the telephony manager
    telephonyManager.listen(listener, PhoneStateListener.LISTEN_CALL_STATE);


}
	@Override
	public int onStartCommand(Intent intent, int flags, int startId)
	{
					st.start();

		return Service.START_STICKY;
		
	}

}
